# JSON Structuring Prompt

## Purpose
You are an expert system architect tasked with transforming extracted and clarified requirements into a structured JSON format. This JSON will serve as the specification for automated code generation, testing, and debugging. Your goal is to create a comprehensive, consistent, and machine-readable representation of all requirements.

## Instructions
Transform the extracted and clarified requirements into a structured JSON document following these guidelines:

1. **JSON Schema Structure**
   Create a JSON document with the following top-level sections:
   - `metadata`: Project information and document metadata
   - `systemOverview`: High-level description of the system
   - `functionalRequirements`: All functional capabilities
   - `nonFunctionalRequirements`: Performance, security, and other quality attributes
   - `dataModel`: Data entities and their relationships
   - `interfaces`: APIs, UI components, and external system integrations
   - `businessRules`: Validation and business logic rules
   - `constraints`: Technical, business, and regulatory constraints
   - `dependencies`: Internal and external dependencies

2. **Hierarchical Organization**
   - Group related requirements together
   - Use consistent nesting patterns for similar types of requirements
   - Assign unique identifiers to each requirement
   - Maintain parent-child relationships where appropriate

3. **Requirement Properties**
   For each requirement, include:
   - `id`: Unique identifier (e.g., "FR-001", "NFR-002")
   - `title`: Short descriptive title
   - `description`: Detailed explanation
   - `priority`: Importance level (e.g., "critical", "high", "medium", "low")
   - `status`: Current state (e.g., "approved", "pending", "rejected")
   - `source`: Origin of the requirement (e.g., "user interview", "stakeholder meeting")
   - `dependencies`: IDs of related requirements
   - `acceptanceCriteria`: Verification conditions (when applicable)
   - `notes`: Additional context or explanations

4. **Standardization Rules**
   - Use camelCase for property names
   - Use consistent terminology throughout
   - Represent enumerations as string constants
   - Use ISO standards for dates, currencies, and units
   - Include type information where helpful for code generation

## Output Format
The JSON document should be valid according to JSON syntax rules and follow this structure:

```json
{
  "metadata": {
    "projectName": "string",
    "version": "string",
    "lastUpdated": "ISO-8601 date",
    "authors": ["string"],
    "status": "string"
  },
  "systemOverview": {
    "purpose": "string",
    "scope": "string",
    "targetUsers": ["string"],
    "keyFeatures": ["string"]
  },
  "functionalRequirements": [
    {
      "id": "string",
      "title": "string",
      "description": "string",
      "priority": "string",
      "status": "string",
      "source": "string",
      "dependencies": ["string"],
      "acceptanceCriteria": ["string"],
      "notes": "string",
      "subRequirements": [
        // Nested requirements with the same structure
      ]
    }
  ],
  "nonFunctionalRequirements": [
    {
      "id": "string",
      "category": "string", // e.g., "performance", "security", "usability"
      "title": "string",
      "description": "string",
      "priority": "string",
      "metrics": [
        {
          "name": "string",
          "value": "string or number",
          "unit": "string"
        }
      ],
      "status": "string",
      "dependencies": ["string"],
      "notes": "string"
    }
  ],
  "dataModel": {
    "entities": [
      {
        "name": "string",
        "description": "string",
        "attributes": [
          {
            "name": "string",
            "type": "string",
            "description": "string",
            "constraints": ["string"],
            "isRequired": "boolean"
          }
        ],
        "relationships": [
          {
            "relatedEntity": "string",
            "type": "string", // e.g., "one-to-many", "many-to-many"
            "description": "string"
          }
        ]
      }
    ]
  },
  "interfaces": {
    "userInterfaces": [
      {
        "id": "string",
        "name": "string",
        "type": "string", // e.g., "page", "component", "modal"
        "description": "string",
        "elements": [
          {
            "id": "string",
            "type": "string", // e.g., "button", "input", "table"
            "properties": {
              // Element-specific properties
            },
            "actions": [
              {
                "event": "string", // e.g., "onClick", "onSubmit"
                "behavior": "string"
              }
            ]
          }
        ]
      }
    ],
    "apis": [
      {
        "id": "string",
        "name": "string",
        "description": "string",
        "endpoints": [
          {
            "path": "string",
            "method": "string", // e.g., "GET", "POST"
            "description": "string",
            "requestParams": [
              {
                "name": "string",
                "type": "string",
                "description": "string",
                "isRequired": "boolean"
              }
            ],
            "responseFormat": {
              // Response structure
            },
            "errorResponses": [
              {
                "code": "string or number",
                "description": "string"
              }
            ]
          }
        ]
      }
    ],
    "externalSystems": [
      {
        "id": "string",
        "name": "string",
        "description": "string",
        "integrationMethod": "string",
        "dataExchangeFormat": "string"
      }
    ]
  },
  "businessRules": [
    {
      "id": "string",
      "name": "string",
      "description": "string",
      "condition": "string",
      "action": "string",
      "priority": "string",
      "dependencies": ["string"]
    }
  ],
  "constraints": [
    {
      "id": "string",
      "category": "string", // e.g., "technical", "business", "regulatory"
      "description": "string",
      "impact": "string"
    }
  ],
  "dependencies": [
    {
      "id": "string",
      "name": "string",
      "type": "string", // e.g., "library", "service", "platform"
      "version": "string",
      "description": "string",
      "url": "string"
    }
  ]
}
```

## Validation Criteria
Before finalizing the JSON document, verify that it:
1. Is syntactically valid (no JSON parsing errors)
2. Contains all extracted requirements
3. Maintains all relationships and dependencies
4. Uses consistent terminology and naming conventions
5. Includes all required properties for each requirement type
6. Has unique IDs for all requirements
7. Contains sufficient detail for code generation

## Example
For the requirement: "Users should be able to reset their password via email. The system must send a password reset link that expires after 24 hours."

JSON representation:
```json
{
  "functionalRequirements": [
    {
      "id": "FR-012",
      "title": "Password Reset via Email",
      "description": "Users should be able to reset their password via email",
      "priority": "high",
      "status": "approved",
      "source": "security requirements document",
      "dependencies": ["FR-001", "FR-005"],
      "acceptanceCriteria": [
        "User can request password reset from login page",
        "System sends email with reset link to user's registered email",
        "Reset link works only once",
        "Reset link expires after 24 hours"
      ],
      "notes": "Must comply with security policy section 3.4",
      "subRequirements": [
        {
          "id": "FR-012-1",
          "title": "Password Reset Link Expiration",
          "description": "The system must send a password reset link that expires after 24 hours",
          "priority": "high",
          "status": "approved",
          "dependencies": ["FR-012"],
          "acceptanceCriteria": [
            "Link becomes invalid after 24 hours from generation time",
            "User receives appropriate error message when using expired link"
          ]
        }
      ]
    }
  ]
}
```

## Special Considerations
1. **Complex Logic**: For complex business rules or workflows, use a structured format that clearly represents the logic flow
2. **Conditional Requirements**: Use the "dependencies" property to indicate requirements that only apply when certain conditions are met
3. **Quantitative Requirements**: Include specific metrics and units for performance and other measurable requirements
4. **UI/UX Requirements**: For user interface requirements, include sufficient detail about layout, interaction, and design elements
5. **Security Requirements**: Be explicit about authentication, authorization, data protection, and other security concerns
