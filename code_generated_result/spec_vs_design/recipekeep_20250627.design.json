{
  "system_Architecture": {
    "description": "A client-server architecture where the frontend (client) interacts with the backend (server) via RESTful APIs. The backend handles data storage and retrieval using a PostgreSQL database.",
    "components": [
      {
        "name": "Web Frontend",
        "description": "Provides the user interface for interacting with the application. Handles user input, displays data, and communicates with the backend API.",
        "technologies": [
          "HTML",
          "CSS",
          "JavaScript",
          "Vanilla"
        ],
        "inputs": [
          "User interactions (button clicks, form submissions, search queries)",
          "API responses from the Backend API"
        ],
        "outputs": [
          "API requests to the Backend API",
          "Rendered UI elements (recipe lists, forms, error messages)"
        ]
      },
      {
        "name": "Backend API",
        "description": "Handles user authentication, data validation, business logic, and database interactions. Exposes RESTful APIs for the frontend to consume.",
        "technologies": [
          "Python",
          "Flask",
          "RESTful"
        ],
        "inputs": [
          "HTTP requests from the Frontend (e.g., create recipe, update recipe)",
          "Database query results"
        ],
        "outputs": [
          "HTTP responses to the Frontend (success/error messages, data)",
          "Database queries (create, read, update, delete recipes)"
        ]
      },
      {
        "name": "Database",
        "description": "Stores user accounts and recipe data persistently.",
        "technologies": [
          "PostgreSQL",
          "SQL"
        ],
        "inputs": [
          "Data read/write requests from the Backend API"
        ],
        "outputs": [
          "Stored data (user accounts, recipes)",
          "Query results (recipes matching search criteria)"
        ]
      }
    ]
  },
  "data_Design": {
    "data_Flow_Description": "User interacts with the frontend, triggering API calls to the Flask backend. The backend validates requests, interacts with the PostgreSQL database for CRUD operations on users and recipes, and returns responses to the frontend.",
    "storage_Type": "SQL",
    "database_Type": "PostgreSQL",
    "data_Models": [
      {
        "model_Name": "User",
        "description": "Represents a user account and their credentials.",
        "fields": [
          {
            "name": "user_id",
            "type": "SERIAL",
            "description": "Primary key for the user.",
            "constraints": [
              "primary_key: true",
              "autoincrement: true"
            ]
          },
          {
            "name": "email",
            "type": "VARCHAR(255)",
            "description": "User's email address, used for login.",
            "constraints": [
              "required",
              "unique",
              "indexed"
            ]
          },
          {
            "name": "password_hash",
            "type": "VARCHAR(255)",
            "description": "Hashed user password.",
            "constraints": [
              "required"
            ]
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP",
            "description": "Timestamp of user creation.",
            "constraints": [
              "default: CURRENT_TIMESTAMP"
            ]
          }
        ],
        "relationships": []
      },
      {
        "model_Name": "Recipe",
        "description": "Represents a recipe created by a user.",
        "fields": [
          {
            "name": "recipe_id",
            "type": "SERIAL",
            "description": "Primary key for the recipe.",
            "constraints": [
              "primary_key: true",
              "autoincrement: true"
            ]
          },
          {
            "name": "user_id",
            "type": "INTEGER",
            "description": "Foreign key linking to the User who owns this recipe.",
            "constraints": [
              "required",
              "indexed"
            ]
          },
          {
            "name": "title",
            "type": "VARCHAR(255)",
            "description": "The title of the recipe.",
            "constraints": [
              "required"
            ]
          },
          {
            "name": "ingredients",
            "type": "TEXT",
            "description": "A text block containing the list of ingredients.",
            "constraints": [
              "required"
            ]
          },
          {
            "name": "instructions",
            "type": "TEXT",
            "description": "Step-by-step instructions for preparing the recipe.",
            "constraints": [
              "required"
            ]
          },
          {
            "name": "cooking_time",
            "type": "INTEGER",
            "description": "Estimated cooking time in minutes.",
            "constraints": [
              "required"
            ]
          },
          {
            "name": "created_at",
            "type": "TIMESTAMP",
            "description": "Timestamp of recipe creation.",
            "constraints": [
              "default: CURRENT_TIMESTAMP"
            ]
          },
          {
            "name": "updated_at",
            "type": "TIMESTAMP",
            "description": "Timestamp of last recipe update.",
            "constraints": [
              "default: CURRENT_TIMESTAMP"
            ]
          }
        ],
        "relationships": [
          {
            "field_Name": "user_id",
            "type": "Many-to-one",
            "related_Model": "User",
            "foreign_Field": "user_id",
            "description": "Each recipe belongs to one user.",
            "implementation_Notes": "FOREIGN KEY (user_id) REFERENCES users(user_id)",
            "on_Delete": "CASCADE"
          }
        ]
      }
    ]
  },
  "interface_Design": {
    "api_Specifications": [
      {
        "endpoint": "/api/register",
        "method": "POST",
        "description": "Registers a new user account.",
        "request_Format": {
          "params": [],
          "query": [],
          "body_Schema": {
            "description": "{ email: String (required), password: String (required) }"
          }
        },
        "response_Format": {
          "success_Status": 201,
          "success_Schema": {
            "description": "Returns the created user object."
          },
          "error_Status": [
            400,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": false,
        "related_NFRs": [
          "NFR-001"
        ]
      },
      {
        "endpoint": "/api/login",
        "method": "POST",
        "description": "Logs in an existing user.",
        "request_Format": {
          "params": [],
          "query": [],
          "body_Schema": {
            "description": "{ email: String (required), password: String (required) }"
          }
        },
        "response_Format": {
          "success_Status": 200,
          "success_Schema": {
            "description": "Returns a JWT token for authentication."
          },
          "error_Status": [
            401,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": false,
        "related_NFRs": [
          "NFR-001"
        ]
      },
      {
        "endpoint": "/api/recipes",
        "method": "GET",
        "description": "Retrieves a list of recipes for the logged-in user.",
        "request_Format": {
          "params": [],
          "query": [],
          "body_Schema": {
            "description": "N/A"
          }
        },
        "response_Format": {
          "success_Status": 200,
          "success_Schema": {
            "description": "Returns an array of recipe objects."
          },
          "error_Status": [
            401,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": true,
        "related_NFRs": [
          "NFR-002"
        ]
      },
      {
        "endpoint": "/api/recipes/{recipe_id}",
        "method": "GET",
        "description": "Retrieves a specific recipe by ID for the logged-in user.",
        "request_Format": {
          "params": [
            "{recipe_id}"
          ],
          "query": [],
          "body_Schema": {
            "description": "N/A"
          }
        },
        "response_Format": {
          "success_Status": 200,
          "success_Schema": {
            "description": "Returns the recipe object."
          },
          "error_Status": [
            401,
            404,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": true,
        "related_NFRs": [
          "NFR-002"
        ]
      },
      {
        "endpoint": "/api/recipes",
        "method": "POST",
        "description": "Creates a new recipe for the logged-in user.",
        "request_Format": {
          "params": [],
          "query": [],
          "body_Schema": {
            "description": "{ title: String (required), ingredients: String (required), instructions: String (required), cooking_time: Integer (required) }"
          }
        },
        "response_Format": {
          "success_Status": 201,
          "success_Schema": {
            "description": "Returns the created recipe object."
          },
          "error_Status": [
            400,
            401,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": true,
        "related_NFRs": [
          "NFR-002"
        ]
      },
      {
        "endpoint": "/api/recipes/{recipe_id}",
        "method": "PUT",
        "description": "Updates an existing recipe by ID for the logged-in user.",
        "request_Format": {
          "params": [
            "{recipe_id}"
          ],
          "query": [],
          "body_Schema": {
            "description": "{ title: String (optional), ingredients: String (optional), instructions: String (optional), cooking_time: Integer (optional) }"
          }
        },
        "response_Format": {
          "success_Status": 200,
          "success_Schema": {
            "description": "Returns the updated recipe object."
          },
          "error_Status": [
            400,
            401,
            404,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": true,
        "related_NFRs": [
          "NFR-002"
        ]
      },
      {
        "endpoint": "/api/recipes/{recipe_id}",
        "method": "DELETE",
        "description": "Deletes a recipe by ID for the logged-in user.",
        "request_Format": {
          "params": [
            "{recipe_id}"
          ],
          "query": [],
          "body_Schema": {
            "description": "N/A"
          }
        },
        "response_Format": {
          "success_Status": 204,
          "success_Schema": {
            "description": "Returns no content."
          },
          "error_Status": [
            401,
            404,
            500
          ],
          "error_Schema": {
            "description": "{ error: 'Error message description' }"
          }
        },
        "authentication_Required": true,
        "related_NFRs": [
          "NFR-002"
        ]
      }
    ],
    "ui_Interaction_Notes": "The registration page sends a POST request to /api/register. The login page sends a POST request to /api/login. The main dashboard fetches recipes from GET /api/recipes on load. Creating a recipe sends a POST request to /api/recipes. Updating a recipe sends a PUT request to /api/recipes/{recipe_id}. Deleting a recipe sends a DELETE request to /api/recipes/{recipe_id}."
  },
  "workflow_Interaction": [
    {
      "workflow_Name": "User Registration Process",
      "description": "1. User submits registration form on Frontend. 2. Frontend sends POST request to /api/register on Backend API. 3. Backend API validates email and password. 4. Backend API hashes password using bcrypt. 5. Backend API saves user data to PostgreSQL database. 6. Database confirms save. 7. Backend API sends success response to Frontend. 8. Frontend redirects to login page.",
      "related_Requirements": [
        "FR-001"
      ]
    },
    {
      "workflow_Name": "Create Recipe Process",
      "description": "1. User fills out the 'create recipe' form on the Frontend. 2. Frontend sends POST request to /api/recipes on Backend API, including recipe details. 3. Backend API validates the recipe data. 4. Backend API saves the new recipe associated with the logged-in user to the PostgreSQL database. 5. Database confirms save. 6. Backend API sends success response to Frontend, including the newly created recipe data. 7. Frontend updates the recipe list on the dashboard to include the new recipe.",
      "related_Requirements": [
        "FR-003"
      ]
    },
    {
      "workflow_Name": "Search Recipes Process",
      "description": "1. User types a search query into the search bar on the Frontend. 2. Frontend sends GET request to /api/recipes with a query parameter containing the search term. 3. Backend API receives the search term. 4. Backend API queries the PostgreSQL database for recipes matching the search term in the title, filtering by the logged-in user's ID. 5. Database returns matching recipes. 6. Backend API sends the filtered recipe list to the Frontend. 7. Frontend updates the recipe list on the dashboard to display only the matching recipes.",
      "related_Requirements": [
        "FR-007"
      ]
    }
  ],
  "folder_Structure": {
    "description": "Proposed folder structure for the RecipeKeep project, including root-level files and main subdirectories for a Flask backend and Vanilla JS frontend. All paths are relative to the root_Project_Directory_Name.",
    "root_Project_Directory_Name": "recipekeep",
    "structure": [
      {
        "path": "requirements.txt",
        "description": "Python backend dependencies file."
      },
      {
        "path": ".env",
        "description": "Environment variables configuration file."
      },
      {
        "path": "backend",
        "description": "Backend application source code and related files directory."
      },
      {
        "path": "backend/src",
        "description": "Backend source code directory"
      },
      {
        "path": "backend/src/config",
        "description": "Configuration files directory (db connection, env variables)"
      },
      {
        "path": "backend/src/controllers",
        "description": "Request handling logic directory"
      },
      {
        "path": "backend/src/models",
        "description": "Database models/schemas directory"
      },
      {
        "path": "backend/src/routes",
        "description": "API route definitions directory"
      },
      {
        "path": "backend/src/services",
        "description": "Business logic directory"
      },
      {
        "path": "backend/src/middlewares",
        "description": "Request processing middleware directory (auth, validation)"
      },
      {
        "path": "backend/server.py",
        "description": "Main application entry point file"
      },
      {
        "path": "frontend",
        "description": "Frontend application source code and related files directory."
      },
      {
        "path": "frontend/public",
        "description": "Static assets directory"
      },
      {
        "path": "frontend/src",
        "description": "Frontend source code directory"
      },
      {
        "path": "frontend/src/components",
        "description": "Reusable UI components directory"
      },
      {
        "path": "frontend/src/pages",
        "description": "Page-level components directory"
      },
      {
        "path": "frontend/src/services",
        "description": "API call functions directory"
      },
      {
        "path": "frontend/src/app.js",
        "description": "Main application JavaScript logic and initialization file"
      },
      {
        "path": "frontend/src/index.js",
        "description": "Frontend entry point file"
      },
      {
        "path": "frontend/index.html",
        "description": "Main HTML file, entry point for the frontend."
      },
      {
        "path": "frontend/style.css",
        "description": "Main CSS file for styling."
      }
    ]
  },
  "dependencies": {
    "backend": [
      "Flask",
      "Flask-SQLAlchemy",
      "psycopg2-binary",
      "bcrypt",
      "Flask-JWT-Extended",
      "python-dotenv"
    ],
    "frontend": []
  },
  "metadata": {
    "generation_step": "design",
    "timestamp": "2025-06-27T17:28:05.505336",
    "model_used": "gemini-2.0-flash",
    "source_specification_filepath": "C:\\Users\\Hoang Duy\\Documents\\Phan Lac Hung\\autocode_assistant\\code_generated_result\\spec_vs_design\\recipekeep_20250627.spec.json",
    "filepath": "C:\\Users\\Hoang Duy\\Documents\\Phan Lac Hung\\autocode_assistant\\code_generated_result\\spec_vs_design\\recipekeep_20250627.design.json"
  }
}